◆DDL データ定義言語

＜代表的なコマンド＞
→ CRETE	(作成)
→ DROP		(削除)
→ ALTER	(変更)





01 【データベース】

「データベースの作成」
構文：CREATE DATABASE データベース名
例）：CREATE DATABASE nyuumon;


「データベースの確認」
構文：SHOW DATABASES;

「データベースの削除」
※内部のテーブルも削除されてしまうので、注意！

構文：DROP DATABASE データベース名;
例）：DROP DATABASE nyuumon;


「データベースの選択」
※データベース接続直後の必須作業！！

構文：USE データベース名;
例）：USE nyuumon;







02 【テーブル】
☆テーブルの作成  その壱

構文：CREATE TABLE テーブル名（
		フィールド名 型名,
		・・・
		・・・  //最終行は,は不要
		）;

例）：CREATE TABLE tbl_employee(
		code INTEGER,
		name VARCHAR(40),
		birthday DATETIME,
		dpt_code INTEGER,
		post_code INTEGER,
		manager INTEGER
		);
		

「テーブルの確認」
構文：SHOW TABLES FROM データベース名;
例）：SHOW TABLES FROM nyuumon;

※現在いるデータベースのテーブル一覧を確認する場合はデータベースの指定は不要
異なるデータベースのテーブル一覧を確認する場合は、指定必須


「作成したテーブルのフィールドを確認する」
構文：SHOW COLUMNS FROM テーブル名;
例）：SHOW COLUMNS FROM tbl_employee;
  COLUMNS → FIELDS も可！


「テーブルを削除する」
構文：DROP TABLE テーブル名;
例）：DROP TABLE tbl_employee;


☆テーブル作成 その弐
※制約を設ける
NOT NULL :データの入力は必須
UNIQUE   :重複した入力を許可しない
DEFAULT  :データが追加されなかった場合の規定値

例）
	CREATE TABLE tbl_employee(
		code INTEGER UNIQUE NOT NULL,  -- 重複を許可しない、入力必須
		name VARCHAR(40),
		birthday DATETIME,
		dpt_code INTEGER NOT NULL,     -- 入力必須
		post_code INTEGER,
		manager INTEGER DEFAULT 100    -- 規定値100を初期化
		);
【コメント】は-- の後に半角スペースを空ける




【制約の解除】
構文：ALTER TABLE テーブル名 MODIFY COLUMN フィールド名 型名;
例）：ALTER TABLE tbl_employee MODIFY COLUMN dpt_code INTEGER;

【制約の上書き設定】
構文：ALTER TABLE テーブル名 MODIFY COLUMN フィールド名 型名 プロパティ複数選択可;
例）：ALTER TABLE tbl_employee MODIFY COLUMN dpt_code INTEGER NOT NULL DFAULT 100;



「テンポラリテーブルの作成」
※データベースに接続している間、作成者のみ使用可能。
  (他社には不可視)
  データベースを切断すると、自動的に削除される。
  
構文：CREATE TEMPORARY TABLE テーブル名(
		フィールド名 型名,
		・・・
		);
例）：CREATE TEMPORARY TABLE tmptbl_employee(
		code INTEGER PRIMARY KEY,
		name VERCHAR(40),
		birthday DATETIME,
		dpt_code INTEGER
		);


「テンポラリテーブルの確認」
フィールドの作成状況で確認可能！
例）SHOW COLUMNS FROM tmptbl_employee; (CLUMNSはFIELDSでも可)

「テンポラリテーブルの削除」
データベースとの接続が切断されると自動削除されるが、
DROP TABLE命令で明示的に削除することもできる

例）DROP TABLE tmptbl_employee;




03-1【主キー・外部キーの設定】
※ ①テーブルの作成時に設定
と ②既存のテーブルに設定する場合の２パターンあり。

「①テーブルの作成時に設定」
【主キー】
※CREATE TABLE命令に、PRIMARY KEYオプションを組み合わせる
※NULLの入力は許可されないので、NOT NULL制約が指定されたフィールドに設定する。
  なお、NOT NULL制約が指定されていない場合は、自動的に設定される。

例）
[作成]CREATE TEMPORARY TABLE tmptbl_employee(
		code INTEGER PRIMARY KEY
		,name VARCHAR(40)
		,birthday DATETIME
		,dpt_code INTEGER
		,post_code INTEGER
		,manager INTEGER
		);
[確認]SHOW COLUMNS FROM tmptbl_employee;
[削除]DROP TABLE tmptbl_employee;

※複数のフィールドで1つの主キーを構成できる！
構文：CREATE TABLE テーブル名(
		フィールド名1 型名 [NOT NULL]
		,フィールド名2 型名 [NOT NULL]
		・・・,
		PRIMARY KEY (フィールド名1, フィールド名2)
		);
		
[作成]CREATE TEMPORARY TABLE tmptbl_employee(
		code INTEGER
		,name VARCHAR(40)
		,birthday DATETIME
		,dpt_code INTEGER
		,post_code INTEGER
		,manager INTEGER
		,PRIMARY KEY(code, dpt_code)
		);
		
		
【主キーを後から設定する】
※ ALTER TABLE命令に、ADD PRIMARY KEYオプションを組み合わせる。
◎ 主キーはテーブル人1つしか設定できないので、キー名は省略しても構わない！

構文： ALTER TABLE tbl_porent ADD PRIMARY KEY (フィールド名);
		
例）[作成] CREATE TABLE tbl_porent(
			id INTEGER NOT NULL
			);
	[確認] SHOW COLUMNS FROM tbl_porent;
	
	[変更] ALTER TABLE tbl_porent ADD PRIMARY KEY (id);



【外部キー】
※ × CREATE TABLE命令に、REFERENCESオプションを組み合わせることは不可！

【抜粋】
MySQLは、参照がカラム指定の一部として定義されている
（SQL標準で定義された）「インラインの REFERENCES 指定」を認識せず、
またサポートもしていません。
MySQLは、個別のFOREIGN KEY 指定の一部として指定されている場合にのみ
REFERENCES 句を受け入れます。

※ ◎ CREATE TABLE命令に、FOREIGN KEYオプションを組み合わせる！

<<× REFERENCESオプションの確認>> ※今は使えない
構文：CREATE TABLE テーブル名(
		フィールド名 型名 [NOT NULL] REFERENCES
		参照先テーブル名(参照先フィールド名),
		・・・
		);
		
例）[作成]CREATE TABLE tbl_employee(
			code INTEGER PRIMARY KEY
			,name VARCHAR(40)
			,birthday DATETIME
			,dpt_code INTEGER
			,post_code INTEGER
			,manager INTEGER
			);
			
	[作成]CREATE TABLE tbl_test(
			code INTEGER
			,name VARCHAR(40)
			,birthday DATETIME
			,dpt_code INTEGER
			,post_code INTEGER
			,manager INTEGER REFERENCES tbl_employee(code)
			);
	[確認]SHOW COLUMNS FROM tbl_employee;
		  SHOW COLUMNS FROM tbl_test;
		  ※外部キーが設定されないテーブルが出来上がる
		  

<<◎ FOREIGN KEYオプション>> ※こちらを使って外部キーを設定する
構文：CREATE TABLE テーブル名(
		フィールド名 型名 NOT NULL,
		・・・
		FORREIGN KEY (フィールド名) REFERENCES
		参照先テーブル名(参照先フィールド名)
		);
		
例）：[作成]CREATE TABLE tbl_porent(
				id INTEGER NOT NULL
				,PRIMARY KEY(id)
				);
	  [作成]CREATE TABLE tbl_child(
				id INTEGER
				,porent_id INTEGER
				,FOREIGN KEY (porent_id) REFERENCES
				tbl_porent(id)
			);
			
	  [確認]SHOW COLUMNS FROM tbl_porent;
	  	    SHOW COLUMNS FROM tbl_child;
※削除する際は、順番に気を付けること。参照元を先に消すことはできない。 教科書P32を参照
※テンポラリテーブルに主キーは作成可能だが、外部キーは作成不可。



【外部キーを後から追加】
※ ALTER TABLE命令に、ADD FOREING KEYオプションを組み合わせる。

構文：ALTER TABLE テーブル名 ADD CONSTRAINT キー名 FOREING KEY(フィールド名) 
	  REFERENCES 参照先テーブル(参照先フィールド名);
	  
◎ キー名を省略した場合、データベースによって自動的に決められる！
【省略したキー名を確認】 SHOW CREATE TABLE命令を使用
※ 指定されたテーブルを作成する CREATE TABLE命令を表示する
構文： SHOW CREATE TABLE テーブル名 \G

※ オプション「\G」 ： 横表示では見づらい場合、縦表示に切り替えることができる。
   \G を使用する場合、文の最後のセミコロン;は不要。
   

例）[作成] CREATE TABLE tbl_child(
			id INTEGER
			,porent_id INTEGER
			);
	[設定] ALTER TABLE tbl_child ADD FOREIGN KEY (porent_id) REFERENCES tbl_porent(id);
	[確認] SHOW COLUMNS FROM tbl_child;
		   SHOW CREATE TABLE tbl_child \G
		   
		   
03-2【主キー・外部キーの削除】
※ △ ALTER TABLE命令に、DEOP CONSTRAINTオプションの組み合わせは使用不可！
→古いバージョンではエラーになる可能性があるので注意

※ ◎ ALTER TABLE命令に、DROP PRIMARY KEY
						 DROP FOREIGN KEY キー名
						 を組み合わせる！

例）ALTER TABLE tbl_child DROP FOREIGN KEY tbl_child_ibfk_1;
	ALTER TABLE tbl_child DROP PRIMARY KEY;

[問題] SHOW COLUMNSから確認できる表示情報にはMULが消えていない
	   →命令に従ってキーは削除されているが表示情報からは削除されていない
※ 外部キーを作成すると暗黙的にインデックスが作成される使用になっている！
→ インデックスの削除をを実施することで表示情報からも削除される



04【自動インクリメント】
※ テーブルに新規レコードを追加すると、特定のフィールドに対して
   一意となる数値を自動的に採番可能
   
  構文：CREATE TABLE テーブル名(
  		フィールド名 型名 PRIMARY KEY AUTO_INCREMENT
  		,・・・
  		);
  		
例）[作成] CREATE TABLE tbl_test(
			code INTEGER PRIMARY KEY AUTO_INCREMENT
			);
	[確認] SHOW COLUMNS FROM tbl_test;
	
	[解除] 構文： ALTER TABLE テーブル名 MODIFY COLUMN フィールド名 型名;
		   例）： ALTER TABLE tbl_test MODIFY COLUMN code INTEGER;
		   
	[削除] DROP TABLE tbl_test;


05-1【インデックスの作成】
※ ① テーブルの作成時に設定
と ② 既存のテーブルに設定する場合の２パターンある。

「① テーブルの作成時に作成」
※ CREATE TABLE命令に、INDEXオプションを組み合わせる。

構文：CREATE TABLE テーブル名(
		フィールド名 型名
		,・・・
		,INDEX [インデックス名](フィールド名(複数指定可))
		);
		※インデックス名は省略可 省略した場合はフィールド名になる
		
例）[作成] CREATE TABLE tbl_employee(
			code INTEGER
			,name VARCHAR(40)
			,birthday DATETIME
			,dpt_code INTEGER
			,post_code INTEGER
			,manager INTEGER
			,INDEX(name)
			);
			
	[確認] SHOW INDEX FROM tbl_employee \G
		   ※\Gの後にはセミコロン;はいらない。
		   →KEY_nameの部分がインデックスの名前


「② 既存テーブルに設定」

※ CREATE INDEX命令 あるいは ALTER TABLE命令を使用する方法の２通りある！

②-1 CREATE INDEX命令 ＋ ONオプションの組み合わせ
構文：CREATE INDEX [インデックス名] ON テーブル名(フィールド名(複数可));

例）：[作成] CREATE INDEX indexBirthday ON tbl_employee(birthday);
	  [確認] SHOW INDEX FROM tbl_employee \G


②-2 ALTER TABLE命令 ＋ ADD INDEXオプションの組み合わせ

構文：ALTER TABLE テーブル名 ADD INDEX [インデックス名] (フィールド名(複数可));

例）[作成] ALTER TABLE tbl_employee ADD INDEX indexMonager (manager);
	[確認] SHOW INDEX FROM tbl_employee \G


05-2【インデックスの削除】

構文：DROP INDEX インデックス名 ON テーブル名;
	  ALTER TABLE テーブル名 DROP INDEX インデックス名;
	  
例）：[削除] DROP INDEX name ON tbl_employee;
			 ALTER TABLE tbl_employee DROP INDEX indexBirthday;
	  [確認] SHOW INDEX FROM tbl_employee \G


06【テーブルの定義の変更】
● フィールドの追加
※ ALTER TABLE命令 ＋ ADDオプションの組み合わせ

構文：ALTER TABLE テーブル名 ADD フィールド名 データ型 オプション名;

例）末尾に追加
	[確認] SHOW COLUMNS FROM tbl_porent;
	[追加] ALTER TABLE tbl_porent ADD name VARCHAR(40);
	[確認] SHOW COLUMNS FROM tbl_porent;
	
例）先頭に追加
	[追加] ALTER TABLE tbl_porent ADD name01 VARCHAR(40) FIRST;
	
例）○○の後ろに追加
	[追加] ALTER TABLE tbl_porent ADD name02 VARCHAR(40) AFTER name01;
	
● フィールドの削除
※ ALTER TABLE命令 ＋ DROP [COLUMN] オプションの組み合わせ

構文：ALTER TABLE テーブル名 DROP [COLUMN] フィールド名;

例）[削除] ALTER TABLE tbl_porent DROP COLUMN name01;
	[削除] ALTER TABLE tbl_porent DROP name02;
	[確認] SHOW COLUMNS FROM tbl_porent;










